<div class="flex h-[600px] flex-col">
  <div id="chat-messages" class="flex-1 space-y-4 overflow-y-auto p-4">
    <!-- Messages will be dynamically inserted here -->
  </div>

  <div class="border-t p-4">
    <form id="chat-form" class="flex gap-2">
      <input
        type="text"
        id="message-input"
        class="flex-1 rounded-lg border px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-50"
        placeholder="Ask a question about our podcast episodes..."
        required
      />
      <button
        type="submit"
        class="rounded-lg bg-blue-50 px-6 py-2 text-white hover:bg-blue-40 focus:outline-none focus:ring-2 focus:ring-blue-50"
      >
        Send
      </button>
    </form>
  </div>
</div>

<script>
  import { marked } from "marked";

  interface Message {
    role: "user" | "assistant";
    content: string;
  }

  const chatMessages = document.getElementById("chat-messages");
  const chatForm = document.getElementById("chat-form") as HTMLFormElement;

  function createTypingIndicator() {
    const messageDiv = document.createElement("div");
    messageDiv.className = "flex justify-start";

    const messageBubble = document.createElement("div");
    messageBubble.className =
      "bg-gray-100 text-gray-800 rounded-lg p-3 flex items-center gap-2";
    messageBubble.innerHTML = `
      <div class="flex gap-1">
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0ms"></div>
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 150ms"></div>
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 300ms"></div>
      </div>
    `;

    messageDiv.appendChild(messageBubble);
    return messageDiv;
  }

  async function createMessageElement(message: Message) {
    const messageElement = document.createElement("div");
    messageElement.className = `message ${message.role}`;

    const messageBubble = document.createElement("div");
    messageBubble.className = "message-bubble";

    if (message.role === "assistant") {
      messageBubble.innerHTML = await marked.parse(message.content);
    } else {
      messageBubble.textContent = message.content;
    }

    messageElement.appendChild(messageBubble);
    return messageElement;
  }

  async function addMessage(message: Message) {
    const messageElement = await createMessageElement(message);
    chatMessages?.appendChild(messageElement);
    if (chatMessages) {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  }

  async function handleSubmit(e: Event) {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const input = form.querySelector("input") as HTMLInputElement;
    const message = input.value.trim();

    if (!message) return;

    // Add user message
    const userMessage: Message = { role: "user", content: message };
    await addMessage(userMessage);

    // Clear input
    input.value = "";

    // Show typing indicator
    const typingIndicator = createTypingIndicator();
    chatMessages?.appendChild(typingIndicator);
    if (chatMessages) {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message }),
      });

      if (!response.ok) throw new Error("Network response was not ok");

      const data = await response.json();

      // Remove typing indicator
      typingIndicator.remove();

      // Add assistant message
      const assistantMessage: Message = {
        role: "assistant",
        content: data.response,
      };
      await addMessage(assistantMessage);
    } catch (error) {
      console.error("Error:", error);
      typingIndicator.remove();
      const errorMessage: Message = {
        role: "assistant",
        content: "Sorry, I encountered an error. Please try again.",
      };
      await addMessage(errorMessage);
    }
  }

  chatForm?.addEventListener("submit", handleSubmit);
</script>

<style>
  /* Add styles for markdown elements */
  :global(.prose) {
    @apply text-gray-800;
  }
  :global(.prose a) {
    @apply text-blue-50 underline hover:text-blue-40;
  }
  :global(.prose ul) {
    @apply my-2 list-inside list-disc;
  }
  :global(.prose li) {
    @apply my-1;
  }
  :global(.prose blockquote) {
    @apply my-2 border-l-4 border-gray-300 pl-4 italic;
  }
  :global(.prose strong) {
    @apply font-bold;
  }
  :global(.prose em) {
    @apply italic;
  }
  /* RTL specific styles */
  :global([dir="rtl"].prose ul) {
    @apply list-inside;
  }
  :global([dir="rtl"].prose blockquote) {
    @apply border-l-0 border-r-4 pl-0 pr-4;
  }
</style>
