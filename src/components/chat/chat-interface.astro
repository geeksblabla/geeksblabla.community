---
// Add frontmatter to ensure proper TypeScript resolution
---

<div class="flex h-[600px] flex-col bg-gray-50">
  <div id="chat-messages" class="flex-1 space-y-2 overflow-y-auto p-4">
    <!-- Messages will be dynamically inserted here -->
  </div>

  <div class="border-t bg-white p-4">
    <form id="chat-form" class="flex gap-2">
      <input
        type="text"
        id="message-input"
        class="flex-1 rounded-full border border-gray-200 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-50"
        placeholder="Ask a question about our podcast episodes..."
        required
      />
      <button
        type="submit"
        class="rounded-full bg-blue-50 px-6 py-2 text-white hover:bg-blue-40 focus:outline-none focus:ring-2 focus:ring-blue-50"
      >
        Send
      </button>
    </form>
  </div>
</div>

<script>
  import { marked } from "marked";

  interface Message {
    role: "user" | "assistant";
    content: string;
  }

  const chatMessages = document.getElementById("chat-messages");
  const chatForm = document.getElementById("chat-form") as HTMLFormElement;

  function createTypingIndicator() {
    const messageDiv = document.createElement("div");
    messageDiv.className = "flex justify-start animate-fade-in";

    const messageBubble = document.createElement("div");
    messageBubble.className =
      "bg-gray-100 text-gray-800 rounded-2xl rounded-tl-sm p-3 flex items-center gap-2 max-w-[80px]";
    messageBubble.innerHTML = `
      <div class="flex gap-1">
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0ms"></div>
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 150ms"></div>
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 300ms"></div>
      </div>
    `;

    messageDiv.appendChild(messageBubble);
    return messageDiv;
  }

  async function createMessageElement(message: Message) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `flex ${message.role === "user" ? "justify-end" : "justify-start"} animate-fade-in`;

    const messageBubble = document.createElement("div");
    messageBubble.className = `max-w-[70%] rounded-2xl p-3 ${
      message.role === "user"
        ? "bg-blue-50 text-white rounded-tr-sm"
        : "bg-white text-gray-800 rounded-tl-sm shadow-sm"
    }`;

    if (message.role === "assistant") {
      const parsedContent = await marked.parse(message.content);
      messageBubble.innerHTML = parsedContent;
      // Add styles for markdown elements
      messageBubble.classList.add("prose", "prose-sm", "max-w-none");
      // Add RTL support for Arabic content
      if (message.content.match(/[\u0600-\u06FF]/)) {
        messageBubble.setAttribute("dir", "rtl");
      }
      // Make all links open in new tab and add hover styles
      messageBubble.querySelectorAll("a").forEach(link => {
        link.setAttribute("target", "_blank");
        link.setAttribute("rel", "noopener noreferrer");
        link.classList.add("text-blue-600", "hover:text-blue-800", "underline");
      });
    } else {
      messageBubble.textContent = message.content;
      // Add RTL support for Arabic content
      if (message.content.match(/[\u0600-\u06FF]/)) {
        messageBubble.setAttribute("dir", "rtl");
      }
    }

    messageDiv.appendChild(messageBubble);
    return messageDiv;
  }

  async function addMessage(message: Message) {
    const messageElement = await createMessageElement(message);
    chatMessages?.appendChild(messageElement);
    if (chatMessages) {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    return messageElement;
  }

  async function handleSubmit(e: Event) {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const input = form.querySelector("input") as HTMLInputElement;
    const message = input.value.trim();

    if (!message) return;

    // Add user message
    const userMessage: Message = { role: "user", content: message };
    await addMessage(userMessage);

    // Clear input
    input.value = "";

    // Show typing indicator
    const typingIndicator = createTypingIndicator();
    chatMessages?.appendChild(typingIndicator);
    if (chatMessages) {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          messages: [{ role: "user", content: message }],
        }),
      });

      if (!response.ok) throw new Error("Network response was not ok");

      // Remove typing indicator
      typingIndicator.remove();

      // Create a new message element for the assistant's response
      const assistantMessage: Message = {
        role: "assistant",
        content: "",
      };
      const messageElement = await addMessage(assistantMessage);
      const contentElement = messageElement.querySelector("div");
      if (!contentElement) throw new Error("Content element not found");

      // Read the stream
      const reader = response.body?.getReader();
      if (!reader) throw new Error("No reader available");

      let buffer = "";
      const decoder = new TextDecoder();

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        // Decode the chunk and add to buffer
        const text = decoder.decode(value);
        buffer += text;

        // Update content immediately
        const parsedContent = await marked.parse(buffer);
        contentElement.innerHTML = parsedContent;
        // Make all links open in new tab
        contentElement.querySelectorAll("a").forEach(link => {
          link.setAttribute("target", "_blank");
          link.setAttribute("rel", "noopener noreferrer");
        });
        if (chatMessages) {
          chatMessages.scrollTop = chatMessages.scrollHeight;
        }
      }
    } catch (error) {
      console.error("Error:", error);
      typingIndicator.remove();
      await addMessage({
        role: "assistant",
        content: "Sorry, I encountered an error. Please try again.",
      });
    }
  }

  chatForm?.addEventListener("submit", handleSubmit);
</script>

<style>
  .prose a {
    @apply text-blue-600 underline hover:text-blue-800;
  }
  .prose ul {
    @apply list-inside list-disc;
  }
  .prose ol {
    @apply list-inside list-decimal;
  }
  .prose li {
    @apply my-1;
  }
  .prose p {
    @apply my-2;
  }
  .prose strong {
    @apply font-bold;
  }
  .prose em {
    @apply italic;
  }
  .prose code {
    @apply rounded bg-gray-100 px-1 py-0.5;
  }
  .prose pre {
    @apply my-2 overflow-x-auto rounded bg-gray-100 p-2;
  }
  .prose blockquote {
    @apply my-2 border-l-4 border-gray-200 pl-4 italic;
  }
</style>
